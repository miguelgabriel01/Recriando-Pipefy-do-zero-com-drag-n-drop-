{"ast":null,"code":"var _jsxFileName = \"/home/gabriel/V\\xEDdeos/meusProjetos/youtube-ui-clone-pipefy/src/components/Card/index.js\";\nimport React, { useRef, useContext } from 'react';\nimport { useDrag, useDrop } from 'react-dnd';\nimport BoardContext from '../Board/context';\nimport { Container, Label } from './styles';\nexport default function Card({\n  data,\n  index,\n  listIndex\n}) {\n  const ref = useRef();\n  const {\n    move\n  } = useContext(BoardContext);\n  const [{\n    isDragging\n  }, dragRef] = useDrag({\n    item: {\n      type: 'CARD',\n      index,\n      listIndex\n    },\n    collect: monitor => ({\n      isDragging: monitor.isDragging()\n    })\n  });\n  const [, dropRef] = useDrop({\n    accept: 'CARD',\n\n    hover(item, monitor) {\n      const draggedListIndex = item.listIndex;\n      const targetListIndex = listIndex;\n      const draggedIndex = item.index;\n      const targetIndex = index;\n\n      if (draggedIndex === targetIndex && draggedListIndex === targetListIndex) {\n        return;\n      }\n\n      const targetSize = ref.current.getBoundingClientRect();\n      const targetCenter = (targetSize.bottom - targetSize.top) / 2;\n      const draggedOffset = monitor.getClientOffset();\n      const draggedTop = draggedOffset.y - targetSize.top;\n\n      if (draggedIndex < targetIndex && draggedTop < targetCenter) {\n        return;\n      }\n\n      if (draggedIndex > targetIndex && draggedTop > targetCenter) {\n        return;\n      }\n\n      move(draggedListIndex, targetListIndex, draggedIndex, targetIndex);\n      item.index = targetIndex;\n      item.listIndex = targetListIndex;\n    }\n\n  });\n  dragRef(dropRef(ref));\n  return /*#__PURE__*/React.createElement(Container, {\n    ref: ref,\n    isDragging: isDragging,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, data.labels.map(label => /*#__PURE__*/React.createElement(Label, {\n    key: label,\n    color: label,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 35\n    }\n  }))), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, data.content), data.user && /*#__PURE__*/React.createElement(\"img\", {\n    src: data.user,\n    alt: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 22\n    }\n  }));\n}","map":{"version":3,"sources":["/home/gabriel/VÃ­deos/meusProjetos/youtube-ui-clone-pipefy/src/components/Card/index.js"],"names":["React","useRef","useContext","useDrag","useDrop","BoardContext","Container","Label","Card","data","index","listIndex","ref","move","isDragging","dragRef","item","type","collect","monitor","dropRef","accept","hover","draggedListIndex","targetListIndex","draggedIndex","targetIndex","targetSize","current","getBoundingClientRect","targetCenter","bottom","top","draggedOffset","getClientOffset","draggedTop","y","labels","map","label","content","user"],"mappings":"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","sourcesContent":["import React, { useRef, useContext } from 'react';\nimport { useDrag, useDrop } from 'react-dnd';\n\nimport BoardContext from '../Board/context';\n\nimport { Container, Label } from './styles';\n\nexport default function Card({ data, index, listIndex }) {\n  const ref = useRef();\n  const { move } = useContext(BoardContext);\n\n  const [{ isDragging }, dragRef] = useDrag({\n    item: { type: 'CARD', index, listIndex },\n    collect: monitor => ({\n      isDragging: monitor.isDragging(),\n    }),\n  });\n\n  const [, dropRef] = useDrop({\n    accept: 'CARD',\n    hover(item, monitor) {\n      const draggedListIndex = item.listIndex;\n      const targetListIndex = listIndex;\n\n      const draggedIndex = item.index;\n      const targetIndex = index;\n\n      if (draggedIndex === targetIndex && draggedListIndex === targetListIndex) {\n        return;\n      }\n\n      const targetSize = ref.current.getBoundingClientRect();\n      const targetCenter = (targetSize.bottom - targetSize.top) / 2;\n\n      const draggedOffset = monitor.getClientOffset();\n      const draggedTop = draggedOffset.y - targetSize.top;\n\n      if (draggedIndex < targetIndex && draggedTop < targetCenter) {\n        return;\n      }\n\n      if (draggedIndex > targetIndex && draggedTop > targetCenter) {\n        return;\n      }\n\n      move(draggedListIndex, targetListIndex, draggedIndex, targetIndex);\n\n      item.index = targetIndex;\n      item.listIndex = targetListIndex;\n    }\n  })\n\n  dragRef(dropRef(ref));\n\n  return (\n    <Container ref={ref} isDragging={isDragging}>\n      <header>\n        {data.labels.map(label => <Label key={label} color={label} />)}\n      </header>\n      <p>{data.content}</p>\n      { data.user && <img src={data.user} alt=\"\"/> }\n    </Container>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}